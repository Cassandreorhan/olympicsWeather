x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("green")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("orange")) +
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
# Filtrer les données pour inclure uniquement les heures entières
paris_hourly <- paris %>%
filter(substr(paris$date_heure, 15, 16) == "00")
plot_temperature <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation_proba <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("green")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("orange")) +
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
paris <- as.data.frame(paris)
Visualize_weather_forecast <- function(forecast) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
# Filtrer les données pour inclure uniquement les heures entières
paris_hourly <- paris %>%
filter(substr(paris$date_heure, 15, 16) == "00")
plot_temperature <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation_proba <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("green")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("orange")) +
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
Visualize_weather_forecast <- function(forecast) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
library(olympicsWeather)
install.packages("remotes")
Visualize_weather_forecast("parc des princes")
Visualize_weather_forecast <- function(location) {
# Obtenez les prévisions météo pour l'emplacement spécifié
forecast <- get_weather_forecast(location)
forecast$date_heure <- as.POSIXct(forecast$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
Visualize_weather_forecast("parc des princes")
Visualize_weather_forecast <- function(location) {
# Obtenez les prévisions météo pour l'emplacement spécifié
forecast <- olympicsWeather::get_weather_forecast(location)
forecast$date_heure <- as.POSIXct(forecast$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
Visualize_weather_forecast("parc des princes")
Visualize_weather_forecast <- function(location) {
# Obtenez les prévisions météo pour l'emplacement spécifié
forecast <- olympicsWeather::get_weather_forecast(location)
forecast$date_heure <- as.POSIXct(forecast$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
Visualize_weather_forecast("stade de france")
Visualize_weather_forecast("lille")
get_weather_forecast("parc des princes")
olympicsWeather::get_weather_forecast("parc des princes")
devtools::document
usethis::use_r(get_weather_forecast)
usethis::use_r("get_weather_forecast")
url <- "https://api.open-meteo.com/v1/forecast"
get_weather_forecast <- function(localisation) {
adress_to_gps <- function(address) {
adress_tibble <- tibble::tribble(~address, address) |> tidygeocoder::geocode(address)
coordonnees <- adress_tibble |>
dplyr::select(lat, long) |>
dplyr::slice(1) |>
unlist()
return(coordonnees)
}
get_forecast.numeric <- function(xy) {
lat <- xy[1]
lon <- xy[2]
result <- olympicsWeather::unnest_response(olympicsWeather::perform_request(lat, lon))
return(tibble::as_tibble(result))
}
get_forecast.character <- function(address) {
coordinates <- adress_to_gps(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
if (is.numeric(localisation) && length(localisation) == 2) {
return(get_forecast.numeric(localisation))
} else if (is.character(localisation) && length(localisation) == 1) {
return(get_forecast.character(localisation))
}
}
get_weather_forecast("Paris")
Visualize_weather_forecast <- function(location) {
# Obtenez les prévisions météo pour l'emplacement spécifié
forecast <- olympicsWeather::get_weather_forecast(location)
forecast$date_heure <- as.POSIXct(forecast$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
olympicsWeather::get_weather_forecast("parc des princes")
olympicsWeather::Visualize_weather_forecast("parc des princes")
Visualize_weather_forecast("parc des princes")
usethis::use_r("perform_request")
usethis::use_r("unnest_response")
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
perform_request(48.85,2.35)
unnest_response(perform_request(48.85,2.35))
unnest_response <- function(donnees_brute){
tibble::tibble(
date_heure = unlist(donnees_brute$hourly[1][[1]]),
temperature_celsius = unlist(donnees_brute$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(donnees_brute$hourly[3][[1]]),
precipitation_proba = unlist(donnees_brute$hourly[4][[1]]),
precipitation = unlist(donnees_brute$hourly[5][[1]]))
}
unnest_response(perform_request(48.85,2.35))
url <- "https://api.open-meteo.com/v1/forecast"
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
usethis::use_test("test_unnest_response")
usethis::use_test("test-unnest_response.R")
list.files()
file.edit("tests/test-unnest_response")
file.edit("tests/testthat/test-unnest_response")
files.edit("C:\Users\cassa\OneDrive\Documents\R avancé\R avancé\olympicsWeather\tests\testthat\test-unnest_response.R")
usethis::use_test("test-unnest_response")
usethis::use_test("test-test-unnest_response")
usethis::use_r("test-unnest_response")
usethis::use_test("test-unnest_response")
usethis::use_test("unnest_response")
usethis::use_test("unnest_response")
usethis::use_testthat()
usethis::use_r("Visualize_weather_forecast")
get_weather_forecast("parc des princes")
forecast <- get_weather_forecast("parc des princes")
Visualize_weather_forecast(forecast)
Visualize_weather_forecast("parc des princes")
usethis::use_r("Visualize_weather_forecast")
Visualize_weather_forecast <- function(location) {
# Obtenez les prévisions météo pour l'emplacement spécifié
forecast <- olympicsWeather::get_weather_forecast(location)
forecast$date_heure <- as.POSIXct(forecast$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(forecast) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
Visualize_weather_forecast("Parc des princes")
usethis::use_r("get_weather_forecast")
usethis::use_r("perform_request")
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
perform_request(47.7,8.3)
url <- "https://api.open-meteo.com/v1/forecast"
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
get_weather_forecast("parc des princes")
View(get_weather_forecast("parc des princes"))
usethis::use_r("unnest_response")
usethis::use_test("unnest_response")
donnees_brute <- olympicsWeather::perform_request(48.85,2.35)
result <-olympicsWeather::unnest_response(donnees_brute)
testthat::test_that("unnest_response renvoie le bon nombre de lignes", {
expect_equal(nrow(result), length(donnees_brute$hourly[[1]]))
})
testthat::test_that("le nom des colonnes en sortie est correct", {
expect_equal(names(result), c("date_heure", "temperature_celsius", "temperature_ressentie_celsius", "precipitation_proba", "precipitation"))
})
testthat::test_that("le nombre de colonnes en sortie est correct", {
expect_equal(ncol(result), 5)
})
donnees_brute <- olympicsWeather::perform_request(48.85,2.35)
result <-olympicsWeather::unnest_response(donnees_brute)
testthat::test_that("unnest_response renvoie le bon nombre de lignes", {
testthat::expect_equal(nrow(result), length(donnees_brute$hourly[[1]]))
})
testthat::test_that("le nom des colonnes en sortie est correct", {
testthat::expect_equal(names(result), c("date_heure", "temperature_celsius", "temperature_ressentie_celsius", "precipitation_proba", "precipitation"))
})
testthat::test_that("le nombre de colonnes en sortie est correct", {
testthat::expect_equal(ncol(result), 5)
})
usethis::use_test("unnest_response")
