x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
Visualize_weather_forecast(subset(paris, as.Date(date_heure) == "2024-03-01"))
Visualize_weather_forecast <- function(forecast) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "T%H:%M")
plot_temperature <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
Visualize_weather_forecast(paris)
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
# Créer un graphique avec ggplot2
ggplot2::ggplot(paris) +
# Ajouter les séries temporelles avec geom_line()
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +  # Multiplié par 10 pour l'échelle
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +  # Multiplié par 10 pour l'échelle
# Personnaliser les axes et le titre
ggplot2::labs(title = "Prévisions météo horaires pour Paris",
x = "Date et heure",
y = "Valeur") +
# Personnaliser les couleurs
ggplot2::scale_color_manual(values = c("Température" = "blue",
"Température ressentie" = "red",
"Probabilité de précipitation" = "green",
"Précipitation" = "orange")) +
# Ajouter une légende
ggplot2::theme(legend.position = "bottom") +
# Facultatif : formater l'axe x pour inclure uniquement les heures
ggplot2::scale_x_datetime(date_labels = "%H:%M", date_breaks = "1 hour") +
# Facultatif : ajuster les limites de l'axe y
ggplot2::ylim(0, NA)  # Remplacez NA par la valeur maximale souhaitée pour l'axe y, ou supprimez cette ligne pour laisser ggplot ajuster automatiquement les limites
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
# Facultatif : formater l'axe x pour inclure uniquement les heures
ggplot2::scale_x_datetime(date_labels = "%H:%M", date_breaks = "1 hour") +
}
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
# Facultatif : formater l'axe x pour inclure uniquement les heures
ggplot2::scale_x_datetime(date_labels = "%H:%M", date_breaks = "1 hour")
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
paris_hourly <- paris %>%
filter(minute(date_heure) == 0)
plot_temperature <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
paris$date_heure <- paris %>%
filter(substr(date_heure, 15, 16) == "00")
plot_temperature <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
paris$date_heure <- paris %>%
filter(substr(paris$date_heure, 15, 16) == "00")
plot_temperature <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
# Filtrer les données pour inclure uniquement les heures entières
paris_hourly <- paris %>%
filter(minute(date_heure) == 0)
plot_temperature <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation_proba <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("green")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("orange")) +
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
# Filtrer les données pour inclure uniquement les heures entières
paris_hourly <- paris %>%
filter(substr(date_heure, 15, 16) == "00")
plot_temperature <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation_proba <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("green")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("orange")) +
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
# Filtrer les données pour inclure uniquement les heures entières
paris_hourly <- paris %>%
filter(substr(paris$date_heure, 15, 16) == "00")
plot_temperature <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation_proba <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("green")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("orange")) +
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
paris <- as.data.frame(paris)
Visualize_weather_forecast <- function(forecast) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
Visualize_hourly_weather_forecast <- function(paris) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
# Filtrer les données pour inclure uniquement les heures entières
paris_hourly <- paris %>%
filter(substr(paris$date_heure, 15, 16) == "00")
plot_temperature <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation_proba <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("green")) +
ggplot2::theme(legend.position = "bottom")
plot_precipitation <- ggplot2::ggplot(paris_hourly) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("orange")) +
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
# Appeler la fonction avec vos données
Visualize_hourly_weather_forecast(paris)
Visualize_weather_forecast <- function(forecast) {
paris$date_heure <- as.POSIXct(paris$date_heure, format = "%Y-%m-%dT%H:%M")
plot_temperature <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_celsius, color = "Température")) +
ggplot2::labs(title = "Température à Paris",
x = "Date et heure",
y = "Température (°C)") +
ggplot2::scale_color_manual(values = c("blue")) +  # Utiliser la couleur bleue uniquement pour la température
ggplot2::theme(legend.position = "bottom")
plot_temperature_ressentie <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = temperature_ressentie_celsius, color = "Température ressentie")) +
ggplot2::labs(title = "Température ressentie à Paris",
x = "Date et heure",
y = "Température ressentie (°C)") +
ggplot2::scale_color_manual(values = c("red")) +  # Utiliser la couleur rouge uniquement pour la température ressentie
ggplot2::theme(legend.position = "bottom")
# Troisième graphique pour la probabilité de précipitation
plot_precipitation_proba <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation_proba * 10, color = "Probabilité de précipitation")) +
ggplot2::labs(title = "Probabilité de précipitation à Paris",
x = "Date et heure",
y = "Probabilité de précipitation") +
ggplot2::scale_color_manual(values = c("Probabilité de précipitation" = "green")) +  # Utiliser la couleur verte uniquement pour la probabilité de précipitation
ggplot2::theme(legend.position = "bottom")
# Quatrième graphique pour la précipitation
plot_precipitation <- ggplot2::ggplot(paris) +
ggplot2::geom_line(ggplot2::aes(x = date_heure, y = precipitation * 10, color = "Précipitation")) +
ggplot2::labs(title = "Précipitation à Paris",
x = "Date et heure",
y = "Précipitation") +
ggplot2::scale_color_manual(values = c("Précipitation" = "orange")) +  # Utiliser la couleur orange uniquement pour la précipitation
ggplot2::theme(legend.position = "bottom")
graph_temperature <- gridExtra::grid.arrange(plot_temperature, plot_temperature_ressentie, ncol = 1)
graph_precipitation <- gridExtra::grid.arrange(plot_precipitation, plot_precipitation_proba, ncol = 1)
}
library(olympicsWeather)
install.packages("remotes")
