}
unnest_response <- function(resp){
tibble::tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
library(tibble)
a=get_forecast.numeric(c(48.85, 2.35))
a
get_weather_forecast <- function(location) {
#' @title Fonction pour effectuer la requête API et obtenir les données brutes
#'
#' @description Cette fonction interne effectue une requête API pour récupérer les données brutes de prévisions météo.
#'
#' @param lat Latitude de la coordonnée GPS.
#' @param lon Longitude de la coordonnée GPS.
#' @return Les données brutes de prévisions météo.
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
#' @title Fonction interne pour transformer les données brutes en format de prévisions météo
#'
#' @description Cette fonction interne prend les données brutes de prévisions météo et les transforme en un format plus lisible.
#'
#' @param resp Les données de prévisions météo.
#' @return Un tibble contenant les prévisions météo formatées.
unnest_response <- function(resp){
tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
#' @title Fonction pour obtenir les coordonnées GPS à partir d'une adresse
#'
#' @description Cette fonction prend une adresse en entrée et retourne les coordonnées GPS correspondantes.
#'
#' @param address L'adresse dont vous voulez obtenir les coordonnées GPS.
#' @return Un vecteur contenant la latitude et la longitude.
get_gps_coordinate <- function(address) {
adress_to_gps <- function(address) {
result <- geo(address=address)
return(c(result$lat, result$long))
}}
#' @title Fonction pour obtenir les prévisions météo à partir de coordonnées GPS
#'
#' @description Cette fonction prend les coordonnées GPS en entrée et retourne les prévisions météo correspondantes.
#'
#' @param x,y Les coordonnées GPS sous forme d'un vecteur numérique de taille 2.
#' @return Un tibble contenant les prévisions météo.
get_forecast.numeric <- function(x,y) {
if (!is.numeric(xy) || length(xy) != 2) {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
lat <- xy[1]
lon <- xy[2]
result <- unnest_response(perform_request(lat, lon))
return(as.tibble(result))
}
#' @title Fonction pour obtenir les prévisions météo à partir d'une adresse
#'
#' @description Cette fonction prend une adresse en entrée et retourne les prévisions météo correspondantes.
#'
#' @param address L'adresse pour laquelle vous souhaitez obtenir les prévisions météo.
#' @return Un tibble contenant les prévisions météo.
get_forecast.character <- function(address) {
if (!is.character(address) || length(address) != 1) {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
coordinates <- get_gps_coordinate(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
}
get_weather_forecast <- function(location) {
if (is.numeric(location)) {
return(get_forecast.numeric(location))
} else if (is.character(location)) {
return(get_forecast.character(location))
} else {
stop("Type de 'location' non pris en charge. Utilisez une adresse (chaîne de caractères) ou des coordonnées GPS (vecteur numérique).")
}
}
b=get_weather_forecast("Paris")
result <- get_weather_forecast("Paris")
get_weather_forecast <- function(adress) {
UseMethod("get_forecast")
}
b=get_weather_forecast("Paris")
url <- "https://api.open-meteo.com/v1/forecast"
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
unnest_response <- function(resp){
tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
get_gps_coordinate <- function(address) {
adress_to_gps <- function(address) {
result <- geo(address=address)
return(c(result$lat, result$long))
}}
get_forecast.numeric <- function(x,y) {
if (!is.numeric(xy) || length(xy) != 2) {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
lat <- xy[1]
lon <- xy[2]
result <- unnest_response(perform_request(lat, lon))
return(as.tibble(result))
}
get_forecast.character <- function(address) {
if (!is.character(address) || length(address) != 1) {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
coordinates <- get_gps_coordinate(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
get_weather_forecast <- function(adress) {
UseMethod("get_forecast")
}
b=get_weather_forecast("Paris")
View(perform_request)
get_forecast.numeric <- function(xy) {
# Vérifier si xy est un vecteur numérique de taille 2
if (!is.numeric(xy) || length(xy) != 2) {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
# Séparer les coordonnées en latitude et longitude
lat <- xy[1]
lon <- xy[2]
# Appeler les fonctions perform_request et unnest_response
result <- unnest_response(perform_request(lat, lon))
# Retourner le résultat sous forme de tibble
return(as.tibble(result))
}
get_forecast.character <- function(address) {
if (!is.character(address) || length(address) != 1) {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
coordinates <- get_gps_coordinate(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
get_weather_forecast <- function(adress) {
UseMethod("get_forecast")
}
b=get_weather_forecast("Paris")
get_weather_forecast <- function(adress) {
UseMethod("get_forecast")
}
b=get_weather_forecast("Paris")
url <- "https://api.open-meteo.com/v1/forecast"
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
unnest_response <- function(resp){
tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
address_to_gps <- function(address) {
result <- geo(address=address)
return(c(result$lat, result$long))
}
get_forecast <- function(location) {
UseMethod("get_forecast")
}
get_forecast.numeric <- function(xy) {
if (!is.numeric(xy) || length(xy) != 2) {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
lat <- xy[1]
lon <- xy[2]
result <- unnest_response(perform_request(lat, lon))
return(as.tibble(result))
}
get_forecast.character <- function(address) {
if (!is.character(address) || length(address) != 1) {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
coordinates <- address_to_gps(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
a=get_forecast("Paris")
url <- "https://api.open-meteo.com/v1/forecast"
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
unnest_response <- function(resp){
tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
address_to_gps <- function(address) {
result <- geo(address=address)
return(c(result$lat, result$long))
}
get_forecast <- function(location) {
UseMethod("get_forecast")
}
get_forecast.numeric <- function(xy) {
if (!is.numeric(xy) || length(xy) != 2) {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
lat <- xy[1]
lon <- xy[2]
result <- unnest_response(perform_request(lat, lon))
return(as.tibble(result))
}
get_forecast.character <- function(address) {
if (!is.character(address) || length(address) != 1) {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
coordinates <- address_to_gps(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
a=get_forecast("Paris")
@import ggmap
get_forecast.character <- function(address) {
if (!is.character(address) || length(address) != 1) {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
coordinates <- address_to_gps(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
a=get_forecast("Paris")
library(get_weather_forecast.R)
library(tidygeocoder)
a=get_forecast("Paris")
a
get_forecast.character <- function(address) {
if (!is.character(address) || length(address) != 1) {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
coordinates <- address_to_gps(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
a=get_forecast("Paris")
url <- "https://api.open-meteo.com/v1/forecast"
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
unnest_response <- function(resp){
tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
address_to_gps <- function(address) {
result <- geo(address=address)
return(c(result$lat, result$long))
}
get_forecast <- function(location) {
UseMethod("get_forecast")
}
get_forecast.numeric <- function(xy) {
if (!is.numeric(xy) || length(xy) != 2) {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
lat <- xy[1]
lon <- xy[2]
result <- unnest_response(perform_request(lat, lon))
return(as.tibble(result))
}
get_forecast.character <- function(address) {
if (!is.character(address) || length(address) != 1) {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
coordinates <- address_to_gps(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
a=get_forecast("Paris")
View(address_to_gps)
View(get_forecast)
View(address_to_gps)
adress_to_gps <- function(address) {
result <- geo(address=address)
return(c(result$lat, result$long))
}}
adress_to_gps <- function(address) {
result <- geo(address=address)
return(c(result$lat, result$long))
}}
#'perform_request
#'
#'@param lat latitude (numeric)
#'@param lon longitude (numeric)
#'
#'@returns a tibble with 5 row
#'@examples
#'perform_request(48.85,2.35)
perform_request <- function(lat, lon) {
response_table <-
request(url) |>
req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
req_perform() |>
resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
resp <- perform_request(48.85,2.35)
url <- "https://api.open-meteo.com/v1/forecast"
library(tibble)
library(httr2)
request(url) |>
req_url_query(
latitude=48.85,
longitude=2.35,
hourly= c("temperature_2m","apparent_temperature", "precipitation_probability","precipitation"),
.multi = "comma") |>
req_perform() |>
resp_body_json() |>
tibble::as_tibble() |>
View()
#'perform_request
#'
#'@param lat latitude (numeric)
#'@param lon longitude (numeric)
#'
#'@returns a tibble with 5 row
#'@examples
#'perform_request(48.85,2.35)
perform_request <- function(lat, lon) {
response_table <-
request(url) |>
req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
req_perform() |>
resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
resp <- perform_request(48.85,2.35)
str(resp$hourly[2][[1]], 1)
unlist(resp$hourly[2][[1]])
View(resp)
unnest_response <- function(resp){
tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
perform_request(48.85,2.35) |> unnest_response() -> y
plot(y$temperature_celsius, type = 'l')
library(tidygeocoder)
library(tidyverse)
adress_to_gps <- function(address) {
result <- geo(address=address)
return(c(result$lat, result$long))
}
adress_to_gps("Parc des Princes")
geo("Parc des Princes")
url <- "https://api.open-meteo.com/v1/forecast"
perform_request <- function(lat, lon) {
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude=lat, longitude=lon,
hourly= c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
unnest_response <- function(resp){
tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
get_gps_coordinate <- function(address) {
adress_to_gps <- function(address) {
result <- geo(address=address)
return(c(result$lat, result$long))
}}
get_forecast <- function(location) {
UseMethod("get_forecast")
}
get_forecast.numeric <- function(xy) {
if (!is.numeric(xy) || length(xy) != 2) {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
lat <- xy[1]
lon <- xy[2]
result <- unnest_response(perform_request(lat, lon))
return(as.tibble(result))
}
get_forecast.character <- function(address) {
if (!is.character(address) || length(address) != 1) {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
coordinates <- address_to_gps(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
a=get_forecast(48.85, 2.35)
a=get_forecast(c(48.85, 2.35))
a
adress_to_gps <- function(address) {
result <- geo(address=address)
return(c(result$lat, result$long))
}
get_forecast.character <- function(address) {
if (!is.character(address) || length(address) != 1) {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
coordinates <- address_to_gps(address)
result <- get_forecast.numeric(coordinates)
return(result)
}
a=get_forecast("Paris")
a
